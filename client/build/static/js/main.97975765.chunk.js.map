{"version":3,"sources":["Images/loading.gif","Data/example_groups.xlsx","Pages/NoHousehold.js","Pages/Household.js","App.js","serviceWorker.js","index.js","Images/sample-layout.png","Data/example_bus_layout.xlsx"],"names":["module","exports","Title","Typography","NoHousehold","level","href","sample_data","src","sample_layout","alt","dataSource","key","GroupId","NumberPassengers","columns","title","dataIndex","align","Household","sample_data_groups","pagination","Header","Layout","Content","Sider","Option","Select","server_address","App","state","social_distance","layout_filename","group_filename","response_optimization","first_page","optimization_type","layout_button_disabled","groups_button_disabled","generate_button_disabled","UploadFile","arg","props","name","accept","multiple","action","onChange","info","status","file","console","log","fileList","message","success","this","setState","type","response","filename","error","disabled","UploadOutlined","Optimize","e","a","preventDefault","fetch","method","headers","body","JSON","stringify","post","text","res","blob","saveAs","OptimizationType","value","document","content","loading","split","map","item","i","DefineContent","className","style","padding","width","mode","defaultSelectedKeys","defaultOpenKeys","height","Item","min","max","defaultValue","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.97975765.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.d5dde2ac.gif\";","module.exports = __webpack_public_path__ + \"static/media/example_groups.c55a8117.xlsx\";","import React from \"react\"\r\nimport {Typography} from \"antd\" \r\nimport sample_layout from '../Images/sample-layout.png'\r\nimport sample_data from '../Data/example_bus_layout.xlsx'\r\n\r\nconst { Title } = Typography;\r\n\r\nconst NoHousehold = () => (\r\n    <>\r\n    <center>\r\n    <Title level={2}>No-Household Optimization</Title>\r\n    </center>\r\n    <Title level={4}>\r\n    <p>The selected optimization type will find a seat to as many passengers as possible given the social distance constraint \r\n    and the vehicle's layout.</p>\r\n    <p>As input, you must provide the desired social distance threshold (in inches) and the layout of the vehicle.</p>\r\n    <p>Regarding the latter, you have to provide an excel file containing the (x,y) location of the center of each seat, where the top-right seat is (0,0).</p>\r\n    <p> For example, this excel file <a href={sample_data}>(link)</a> encodes the layout displayed below </p> </Title>\r\n    <center><img src={sample_layout}  alt=\"Bus layout\" /></center>\r\n    </>\r\n);\r\n\r\nexport default NoHousehold;","import React from \"react\"\r\nimport {Typography, Table} from \"antd\" \r\nimport sample_layout from '../Images/sample-layout.png'\r\nimport sample_data from '../Data/example_bus_layout.xlsx'\r\nimport sample_data_groups from '../Data/example_groups.xlsx'\r\n\r\n\r\nconst { Title } = Typography;\r\n\r\nconst dataSource = [\r\n    {key: '1', GroupId: '1', NumberPassengers: '3'},\r\n    {key: '2', GroupId: '2', NumberPassengers: '4'},\r\n    {key: '3', GroupId: '3', NumberPassengers: '1'},\r\n    {key: '4', GroupId: '4', NumberPassengers: '2'},\r\n    {key: '5', GroupId: '5', NumberPassengers: '7'},\r\n    {key: '6', GroupId: '6', NumberPassengers: '1'}\r\n];\r\n\r\nconst columns = [\r\n    {title: 'GroupId', dataIndex: 'GroupId', key: 'GroupId', align: 'center'},\r\n    {title: 'NumberPassengers', dataIndex: 'NumberPassengers', key: 'NumberPassengers', align: 'center'}\r\n];\r\n  \r\n\r\n\r\nconst Household = () => (\r\n    <>\r\n    <center>\r\n    <Title level={2}>Household Optimization</Title>\r\n    </center>\r\n    <Title level={4}>\r\n    <p>The selected optimization type will fill in the available seats starting from the back of the vehicle.\r\n       Group members (e.g., family) are exempt from the social distance constraint.</p>\r\n    <p>As input, you must provide the desired social distance threshold (in inches), the layout of the vehicle, and information about groups.</p>\r\n    <p>Regarding the vehicle's layout, you have to provide an excel file containing the (x,y) location of the center of each seat, where the top-right seat is (0,0).</p>\r\n    <p> For example, this excel file <a href={sample_data}>(link)</a> encodes the layout displayed below </p> \r\n    </Title>\r\n    <center><img src={sample_layout}  alt=\"Bus layout\" /></center>\r\n    <Title level={4}>\r\n    <p>To define groups of passengers who can travel together, you must provide an excel file containing two collumns: <i>GroupId</i> and <i>NumberPassengers</i>.</p>\r\n    <p><i>GroupId</i> defines the \"pick up\" order. <i>NumberPassengers</i> defines how many passenger are part of a group and, hence, can travel close to one another.</p>\r\n    <p>For example, this excel file <a href={sample_data_groups}>(link)</a> encodes the configuration displayed below</p> \r\n    </Title>\r\n    <center><Table  pagination={false} dataSource={dataSource} columns={columns} /></center>\r\n    </>\r\n);\r\n\r\nexport default Household;","import React, {Component} from \"react\"\nimport {Menu, Layout, Button, InputNumber, Upload, message, Select, Typography} from \"antd\" \nimport {UploadOutlined} from '@ant-design/icons';\nimport {saveAs} from 'file-saver';\nimport \"./App.css\"\nimport loading     from './Images/loading.gif'\nimport NoHousehold from './Pages/NoHousehold.js';\nimport Household   from './Pages/Household.js';\n\n\n\nconst { Title } = Typography;   \nconst { Header, Content, Sider } = Layout;\nconst { Option } = Select;\n//const server_address = 'http://localhost:80'\nconst server_address = 'http://10.36.11.28:80'\n\n\nclass App extends Component {\n\n    state = {\n        social_distance: 72,\n        layout_filename: \"\",\n        group_filename:  \"\",\n        response_optimization :\"\",\n        first_page: \"initial\",\n        optimization_type:\"\",\n        layout_button_disabled: true,\n        groups_button_disabled: true,\n        generate_button_disabled: true\n    };\n  \n    componentDidMount() {\n        document.title = 'Seating Planner';\n    }\n\n    // Function called to upload a file to the server\n    UploadFile = (arg) => {     \n     \n        const props = {\n            name: \"file\",\n            accept:\".csv,.xlsx\",\n            multiple: false,\n            action: server_address+'/upload',\n            onChange(info) {\n                const { status } = info.file;\n                if (status !== 'uploading') {\n                    console.log(info.file, info.fileList);\n                }\n                if (status === 'done') {      \n                    message.success(`${info.file.name} file uploaded successfully.`);\n                    arg.this.setState({[arg.type+\"_filename\"]:info.file.response.filename}); //filename of either layout_filename or group_filename\n                } else if (status === 'error') {\n                    message.error(`${info.file.name} file upload failed.`);\n                }\n            },\n        };\n        return (\n            <Upload {...props}><Button disabled={arg.disabled}><UploadOutlined /> Click to upload a {[arg.type]} file</Button> </Upload>\n        )\n    }\n\n    // Function that indirectly calls the Python script to optimize a layout\n    Optimize = async e => {\n        e.preventDefault();\n\n        if(this.state.layout_filename === \"\") {\n            message.error('Please upload a layout file first', 5);\n        }\n        else if (this.state.group_filename ===\"\" && this.state.optimization_type ===\"Household\") {\n            message.error('Please upload a group file first', 5);\n        }\n        else {\n            //change main screen to loading gif\n            this.setState({first_page: \"loading\"})\n            \n            // call optimize procedure\n            const response = await fetch(server_address+'/optimize', {\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                body: JSON.stringify({ post: this.state }),\n            });\n            \n            const body = await response.text();\n            \n            if (body === \"Error-PY1\") {\n                message.error('Error when reading the uploaded layout file', 5);\n            }\n            else if (body === \"Error-PY2\") {\n                message.error('Error when reading the uploaded group file', 5);\n            }\n            else { // asks for the generated pdf\n\n                this.setState({response_optimization: body})\n                var res = await fetch(server_address+\"/output\",  { \n                    method: \"POST\",\n                    headers: { \"Content-Type\": \"application/json\"},\n                    body:JSON.stringify({ post: this.state }),\n                })       \n                \n                // download requested pdf\n                const blob = await res.blob();\n                saveAs(blob, \"layout.pdf\")\n            }\n\n            // change the main screen to outcome screen\n            this.setState({first_page: \"outcome\",\n                        optimization_type: \"\",\n                        layout_button_disabled: true,\n                        groups_button_disabled: true,\n                        generate_button_disabled: true})\n                        \n        }\n    }\n\n    // Function that defines the content of the main panel\n    DefineContent() {\n        var content;\n\n        if (this.state.first_page === \"initial\") {\n            content = <Title level={2}><center>Please, select an <i>Optimization Type</i></center></Title>\n        }\n        else if (this.state.first_page === \"no_household\") {\n            content = <NoHousehold />\n        }\n        else if (this.state.first_page === \"household\") {\n            content = <Household />\n        }\n        else if (this.state.first_page === \"loading\") { \n            content = <><center><img src={loading} alt=\"Loading\" /></center></>\n        }\n        else if (this.state.first_page === \"outcome\") { \n            content = this.state.response_optimization.split('<br>').map ((item, i) => <p key={i}>{item}</p>);\n            content =  <Title level={2}><center>{content}</center> </Title>;\n        }\n      return(content)\n    }\n\n\n    // Function that process changes when an optimization type is selected\n    OptimizationType = (value) => {\n        if (value === \"no_household\") {\n            this.setState({first_page:\"no_household\",\n                           optimization_type:\"No Household\",        \n                           layout_button_disabled: false,\n                           groups_button_disabled: true,\n                           generate_button_disabled: false})\n        }\n        else if (value === \"household\") {\n            this.setState({first_page:\"household\",\n                           optimization_type:\"Household\",        \n                           layout_button_disabled: false,\n                           groups_button_disabled: false,\n                           generate_button_disabled: false})\n        }\n\n    }\n\n    // Render the website\n    render() {\n        \n        const content = this.DefineContent();\n      \n        return (\n            <Layout>\n                <Header className=\"header\"> Seating Planner </Header>\n                <Content style={{ padding: '0 50px' }}>\n                    <Layout className=\"site-layout-background\" style={{ padding: '24px 0' }}>\n                        <Sider className=\"site-layout-background\" width={380}>\n                            <Menu mode=\"inline\" defaultSelectedKeys={['1']} defaultOpenKeys={['sub1']} style={{ height: '100%' }} >\n                                <Menu.Item key=\"1\"> Optimization type:  \n                                    <Select value={this.state.optimization_type} style={{ width: 200 }} onChange ={this.OptimizationType}>\n                                        <Option value=\"no_household\">No Household</Option>\n                                        <Option value=\"household\">Household</Option>\n                                    </Select>\n                                </Menu.Item>\n                                <Menu.Item key=\"2\"> Desired social distance in inches: \n                                    <InputNumber min={0} max={1000} defaultValue={72} onChange={(e) =>this.setState({social_distance:e})} />\n                                </Menu.Item>\n                                <Menu.Item key=\"3\"><this.UploadFile type={\"layout\"} this = {this} disabled = {this.state.layout_button_disabled}/></Menu.Item>\n                                <Menu.Item key=\"4\"><this.UploadFile type={\"group\"}  this = {this} disabled = {this.state.groups_button_disabled}/></Menu.Item>\n                                <Menu.Item key=\"5\"><Button type=\"primary\" disabled = {this.state.generate_button_disabled} onClick={this.Optimize}>Generate seating plan</Button></Menu.Item>\n                            </Menu>                \n                        </Sider>\n                        <Content>{content}</Content>\n                    </Layout>\n                </Content>\n            </Layout>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/sample-layout.87170033.png\";","module.exports = __webpack_public_path__ + \"static/media/example_bus_layout.66e30d9b.xlsx\";"],"sourceRoot":""}